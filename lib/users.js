// Generated by ToffeeScript 1.6.3
(function() {
  var Mongolian, dash, db, fs, mustache, nodemailer, opts, passwordHash, randpass, server, smtp, users,
    _this = this;

  passwordHash = require('password-hash');

  randpass = require('randpass');

  fs = require('fs');

  nodemailer = require('nodemailer');

  Mongolian = require('mongolian');

  dash = require('lodash');

  mustache = require('mustache');

  server = null;

  db = null;

  users = null;

  opts = {
    mail: {
      from: 'root',
      subjectadd: 'User account created',
      bodyadd: "Username: {{name}} password: {{pass}",
      bodyreset: "Username: {{name}} password: {{pass}}",
      subjectreset: 'Password reset',
      mailer: 'sendmail'
    },
    collection: 'users',
    sendEmails: true
  };

  smtp = nodemailer.createTransport("Sendmail", "/usr/sbin/sendmail");

  function getMailer() {
    var _ref;
    if ((((_ref = opts.mail) != null ? _ref.mailer : void 0) != null) !== 'sendmail') {
      return opts.mail.mailer;
    } else {
      return smtp;
    }
  };

  function config(options) {
    dash.merge(opts, options);
    if (opts.connect != null) {
      db = new Mongolian(opts.connect);
    } else {
      db = new Mongolian('mongo://localhost:27017/users');
    }
    if (opts.collection != null) {
      return users = db.collection(opts.collection);
    } else {
      return users = db.collection('users');
    }
  };

  config({});

  function checkExists(email, cb) {
    var e, existing,
      _this = this;
    users.findOne({
      email: email
    }, function() {
      e = arguments[0], existing = arguments[1];
      return cb(existing != null);
    });
  };

  function addNoEmail(email, name, pass, cb) {
    var _this = this;
    checkExists(email, function(_$$_2) {
      _$cb$_1(!_$$_2);
    });
    function _$cb$_1(_$$_0) {
      if (_$$_0) {
        users.insert({
          email: email,
          name: name,
          passhash: passwordHash.generate(pass)
        });
        return typeof cb === "function" ? cb() : void 0;
      } else {
        return typeof cb === "function" ? cb() : void 0;
      }
    };
  };

  function add(email, name, pass, cb) {
    var e, existing, mailer, newuser, options, rendered;
    checkExists(email, function() {
      existing = arguments[0];
      checkExists(email, function(_$$_6) {
        _$cb$_5(!_$$_6);
      });
      function _$cb$_5(_$$_4) {
        if (_$$_4) {
          newuser = {
            email: email,
            name: name,
            passhash: passwordHash.generate(pass)
          };
          users.insert(newuser, function() {
            newuser.password = pass;
            rendered = mustache.render(opts.mail.bodyadd, newuser);
            if (opts.sendEmails) {
              try {
                options = {
                  from: opts.mail.from,
                  to: email,
                  subject: opts.mail.subjectadd,
                  text: rendered
                };
                mailer = getMailer();
                mailer.sendMail(options, function(err, res) {
                  if (err != null) {
                    return console.log(err);
                  } else {
                    return console.log('Message sent: ' + res.message);
                  }
                });
              } catch (_error) {
                e = _error;
                console.log('Error sending user mail' + e.message);
                console.log(e);
              }
            }
            return typeof cb === "function" ? cb() : void 0;
          });
        } else {
          return typeof cb === "function" ? cb() : void 0;
        }
      };
    });
  };

  function resetPassword(name, cb) {
    var change, e, hash, mailer, options, pass, rendered, user;
    users.findOne({
      name: name
    }, function() {
      e = arguments[0], user = arguments[1];
      if (user != null) {
        pass = randpass();
        hash = passwordHash.generate(pass);
        change = {
          $set: {
            passhash: hash
          }
        };
        users.update({
          name: name
        }, change);
        rendered = mustache.render(opts.mail.bodyreset, user);
        if (opts.sendEmails) {
          try {
            options = {
              from: opts.mail.from,
              to: user.email,
              subject: opts.mail.subjectreset,
              text: rendered
            };
            mailer = getMailer();
            mailer.sendMail(options, function(err, res) {
              if (err != null) {
                console.log(err);
              } else {
                console.log('Message sent: ' + res.message);
              }
              return cb(true);
            });
          } catch (_error) {
            e = _error;
            console.log('Error sending user mail' + e.message);
            console.log(e);
          }
        }
        return cb(true);
      }
    });
  };

  function updatePassword(username, oldpass, newpass, cb) {
    var change, hash;
    checkPassword(username, oldpass, function(_$$_10) {
      _$cb$_9(!_$$_10);
    });
    function _$cb$_9(_$$_8) {
      if (_$$_8) {
        return cb(false);
      } else {
        hash = passwordHash.generate(newpass);
        change = {
          $set: {
            passhash: hash
          }
        };
        users.update({
          name: username
        }, change);
        return cb(true);
      }
    };
  };

  function checkPassword(username, pass, cb) {
    var e, user;
    users.findOne({
      name: username
    }, function() {
      e = arguments[0], user = arguments[1];
      if (user != null) {
        return cb(passwordHash.verify(pass, user.passhash));
      } else {
        return cb(false);
      }
    });
  };

  exports.opts = opts;

  exports.config = config;

  exports.add = add;

  exports.checkExists = checkExists;

  exports.resetPassword = resetPassword;

  exports.updatePassword = updatePassword;

  exports.checkPassword = checkPassword;

  exports.addNoEmail = addNoEmail;

  exports.users = users;

}).call(this);
